dnl -*- mode: m4 -*-
AC_PREREQ(2.52)

AC_INIT(dbus/dbus.h)

AM_INIT_AUTOMAKE(dbus, 0.6)

AM_CONFIG_HEADER(config.h)

# Honor aclocal flags
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

GETTEXT_PACKAGE=dbus-1
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[The name of the gettext domain])

 ## must come before we use the $USE_MAINTAINER_MODE variable later
AM_MAINTAINER_MODE

AC_PROG_CC
AC_PROG_CXX
AC_ISC_POSIX
AC_HEADER_STDC
AM_PROG_LIBTOOL

AC_ARG_ENABLE(qt,      [  --enable-qt      enable Qt-friendly client library],enable_qt=$enableval,enable_qt=auto)
AC_ARG_ENABLE(glib,    [  --enable-glib    enable GLib-friendly client library],enable_glib=$enableval,enable_glib=auto)
AC_ARG_ENABLE(tests,   [  --enable-tests   enable unit test code],enable_tests=$enableval,enable_tests=$USE_MAINTAINER_MODE)
AC_ARG_ENABLE(ansi,    [  --enable-ansi    enable -ansi -pedantic gcc flags],enable_ansi=$enableval,enable_ansi=no)
AC_ARG_ENABLE(verbose-mode, [  --enable-verbose-mode support verbose debug mode],enable_verbose_mode=$enableval,enable_verbose_mode=yes)
AC_ARG_ENABLE(asserts, [  --enable-asserts include assertion checks],enable_asserts=$enableval,enable_asserts=yes)
AC_ARG_ENABLE(gcov,    [  --enable-gcov compile with coverage profiling instrumentation (gcc only)],enable_gcov=$enableval,enable_gcov=no)

AC_ARG_WITH(xml,          [  --with-xml=[libxml/expat] XML library to use])
AC_ARG_WITH(init-scripts, [  --with-init-scripts=[redhat] Style of init scripts to install])

dnl DBUS_BUILD_TESTS controls unit tests built in to .c files 
dnl and also some stuff in the test/ subdir
AM_CONDITIONAL(DBUS_BUILD_TESTS, test x$enable_tests = xyes)
if test x$enable_tests = xyes; then
    AC_DEFINE(DBUS_BUILD_TESTS,1,[Build test code])
fi

if test x$enable_verbose_mode = xyes; then
    AC_DEFINE(DBUS_ENABLE_VERBOSE_MODE,1,[Support a verbose mode])
fi
if test x$enable_asserts = xno; then
    AC_DEFINE(DBUS_DISABLE_ASSERT,1,[Disable assertion checking])
fi

#### gcc warning flags

if test "x$GCC" = "xyes"; then
  changequote(,)dnl
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac

  case " $CFLAGS " in
  *[\ \	]-Wchar-subscripts[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wchar-subscripts" ;;
  esac

  case " $CFLAGS " in
  *[\ \	]-Wmissing-declarations[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wmissing-declarations" ;;
  esac

  case " $CFLAGS " in
  *[\ \	]-Wmissing-prototypes[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wmissing-prototypes" ;;
  esac

  case " $CFLAGS " in
  *[\ \	]-Wnested-externs[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wnested-externs" ;;
  esac

  case " $CFLAGS " in
  *[\ \	]-Wpointer-arith[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wpointer-arith" ;;
  esac

  case " $CFLAGS " in
  *[\ \	]-Wcast-align[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wcast-align" ;;
  esac

  case " $CFLAGS " in
  *[\ \	]-Wsign-compare[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wsign-compare" ;;
  esac

  if test "x$enable_ansi" = "xyes"; then
    case " $CFLAGS " in
    *[\ \	]-ansi[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -ansi" ;;
    esac

    case " $CFLAGS " in
    *[\ \	]-pedantic[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -pedantic" ;;
    esac
  fi
  if test x$enable_gcov = xyes; then
    case " $CFLAGS " in
    *[\ \	]-fprofile-arcs[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -fprofile-arcs" ;;
    esac
    case " $CFLAGS " in
    *[\ \	]-ftest-coverage[\ \	]*) ;;
    *) CFLAGS="$CFLAGS -ftest-coverage" ;;
    esac

    ## remove optimization
    CFLAGS=`echo "$CFLAGS" | sed -e 's/-O[0-9]*//g'`
  fi
  changequote([,])dnl
else
  if test x$enable_gcov = xyes; then
    AC_MSG_ERROR([--enable-gcov can only be used with gcc])
  fi
fi

if test x$enable_gcov = xyes; then
     ## so that config.h changes when you toggle gcov support
     AC_DEFINE_UNQUOTED(DBUS_GCOV_ENABLED, 1, [Defined if gcov is enabled to force a rebuild due to config.h changing])
fi
AM_CONDITIONAL(DBUS_GCOV_ENABLED, test x$enable_gcov = xyes)

#### Integer sizes 

AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(__int64)

### this is only used in decode-gcov.c right now
case 8 in
$ac_cv_sizeof_int)
  dbusint64=int
  ;;
$ac_cv_sizeof_long)
  dbusint64=long
  ;;
$ac_cv_sizeof_long_long)
  dbusint64='long long'
  ;;
$ac_cv_sizeof___int64)
  dbusint64=__int64
  ;;
esac

AC_DEFINE_UNQUOTED(DBUS_INT64_TYPE, $dbusint64, [64-bit integer type])

## byte order
AC_C_BIGENDIAN

AC_CHECK_LIB(socket,socket)
AC_CHECK_LIB(nsl,gethostbyname)

AC_CHECK_FUNCS(vsnprintf vasprintf nanosleep usleep poll setenv unsetenv socketpair getgrouplist)

AC_CHECK_HEADERS(execinfo.h, [AC_CHECK_FUNCS(backtrace)])

AC_CACHE_CHECK([for posix getpwnam_r],
		ac_cv_func_posix_getpwnam_r,
		[AC_TRY_RUN([
#include <errno.h>
#include <pwd.h>
int main () { 
    char buffer[10000];
    struct passwd pwd, *pwptr = &pwd;
    int error;
    errno = 0;
    error = getpwnam_r ("", &pwd, buffer, 
                        sizeof (buffer), &pwptr);
   return (error < 0 && errno == ENOSYS) 
	   || error == ENOSYS; 
}               ],
	[ac_cv_func_posix_getpwnam_r=yes],
	[ac_cv_func_posix_getpwnam_r=no])])
if test "$ac_cv_func_posix_getpwnam_r" = yes; then
	AC_DEFINE(HAVE_POSIX_GETPWNAM_R,1,
		[Have POSIX function getpwnam_r])
else
	AC_CACHE_CHECK([for nonposix getpwnam_r],
		ac_cv_func_nonposix_getpwnam_r,
		[AC_TRY_LINK([#include <pwd.h>],
                      	[char buffer[10000];
                       	struct passwd pwd;
                       	getpwnam_r ("", &pwd, buffer, 
                               		sizeof (buffer));],
			[ac_cv_func_nonposix_getpwnam_r=yes],
			[ac_cv_func_nonposix_getpwnam_r=no])])
		if test "$ac_cv_func_nonposix_getpwnam_r" = yes; then
		AC_DEFINE(HAVE_NONPOSIX_GETPWNAM_R,1,
			[Have non-POSIX function getpwnam_r])
	fi
fi

dnl check for writev header and writev function so we're 
dnl good to go if HAVE_WRITEV gets defined.
AC_CHECK_HEADERS(sys/uio.h, [AC_CHECK_FUNCS(writev)])

dnl check for flavours of varargs macros (test from GLib)
AC_MSG_CHECKING(for ISO C99 varargs macros in C)
AC_TRY_COMPILE([],[
int a(int p1, int p2, int p3);
#define call_a(...) a(1,__VA_ARGS__)
call_a(2,3);
],dbus_have_iso_c_varargs=yes,dbus_have_iso_c_varargs=no)
AC_MSG_RESULT($dbus_have_iso_c_varargs)

AC_MSG_CHECKING(for GNUC varargs macros)
AC_TRY_COMPILE([],[
int a(int p1, int p2, int p3);
#define call_a(params...) a(1,params)
call_a(2,3);
],dbus_have_gnuc_varargs=yes,dbus_have_gnuc_varargs=no)
AC_MSG_RESULT($dbus_have_gnuc_varargs)

dnl Output varargs tests
if test x$dbus_have_iso_c_varargs = xyes; then
    AC_DEFINE(HAVE_ISO_VARARGS,1,[Have ISO C99 varargs macros])
fi
if test x$dbus_have_gnuc_varargs = xyes; then
    AC_DEFINE(HAVE_GNUC_VARARGS,1,[Have GNU-style varargs macros])
fi

dnl Check for various credentials.
AC_MSG_CHECKING(for struct cmsgcred)
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
],[
struct cmsgcred cred;

cred.cmcred_pid = 0;
],dbus_have_struct_cmsgcred=yes,dbus_have_struct_cmsgcred=no)
AC_MSG_RESULT($dbus_have_struct_cmsgcred)

if test x$dbus_have_struct_cmsgcred = xyes; then
    AC_DEFINE(HAVE_CMSGCRED,1,[Have cmsgcred structure])
fi


#### Sort out XML library

# see what we have
AC_CHECK_LIB(expat, XML_ParserCreate_MM, 
             [ AC_CHECK_HEADERS(expat.h, have_expat=true, have_expat=false) ],
             have_expat=false)

PKG_CHECK_MODULES(LIBXML, libxml-2.0, have_libxml=true, have_libxml=false)

# see what we want to use
dbus_use_libxml=false
dbus_use_expat=false
if test x$with_xml = xexpat; then
        dbus_use_expat=true
        if ! $have_expat ; then
           AC_MSG_ERROR([Explicitly requested expat but expat not found])
        fi
elif test x$with_xml = xlibxml; then
        dbus_use_libxml=true
        if ! $have_libxml ; then
           AC_MSG_ERROR([Explicitly requested libxml but libxml not found])
        fi
else
        ### expat is the default because libxml can't currently survive 
        ### our brutal OOM-handling unit test setup.
        ### http://bugzilla.gnome.org/show_bug.cgi?id=109368
        if $have_expat ; then
                with_xml=expat
                dbus_use_expat=true
        elif $have_libxml ; then
                with_xml=libxml
                dbus_use_libxml=true
        else
                AC_MSG_ERROR([No XML library found, check config.log for failed attempts])
        fi
fi

AM_CONDITIONAL(DBUS_USE_EXPAT, $dbus_use_expat)
AM_CONDITIONAL(DBUS_USE_LIBXML, $dbus_use_libxml)

if $dbus_use_expat; then
   XML_LIBS=-lexpat
   XML_CFLAGS=
fi
if $dbus_use_libxml; then
   XML_LIBS=$LIBXML_LIBS
   XML_CFLAGS=$LIBXML_CFLAGS
fi

#### Set up final flags
DBUS_CLIENT_CFLAGS=
DBUS_CLIENT_LIBS=
AC_SUBST(DBUS_CLIENT_CFLAGS)
AC_SUBST(DBUS_CLIENT_LIBS)

DBUS_BUS_CFLAGS=$XML_CFLAGS
DBUS_BUS_LIBS=$XML_LIBS
AC_SUBST(DBUS_BUS_CFLAGS)
AC_SUBST(DBUS_BUS_LIBS)

DBUS_TEST_CFLAGS=
DBUS_TEST_LIBS=
AC_SUBST(DBUS_TEST_CFLAGS)
AC_SUBST(DBUS_TEST_LIBS)

# Glib detection
PKG_CHECK_MODULES(DBUS_GLIB, glib-2.0, have_glib=yes, have_glib=no)
PKG_CHECK_MODULES(DBUS_GLIB_THREADS, glib-2.0 gthread-2.0, have_glib_threads=yes, have_glib_threads=no)

if test x$have_glib = xno ; then
    AC_MSG_WARN([GLib development libraries not found])
fi

if test x$enable_glib = xyes; then
    if test x$have_glib = xno; then
	AC_MSG_ERROR([GLib explicitly required, and GLib development libraries not found])
    fi
fi

if test x$enable_glib = xno; then
   have_glib=no;
fi

AM_CONDITIONAL(HAVE_GLIB, test x$have_glib = xyes)
AM_CONDITIONAL(HAVE_GLIB_THREADS, test x$have_glib_threads = xyes)

dnl GLib flags
AC_SUBST(DBUS_GLIB_CFLAGS)
AC_SUBST(DBUS_GLIB_LIBS)
AC_SUBST(DBUS_GLIB_THREADS_LIBS)

# Qt detection
have_qt=no
if test -n "$QTDIR" -a -f $QTDIR/include/qglobal.h; then
    have_qt=yes
    DBUS_QT_CXXFLAGS=-I$QTDIR/include
fi

dnl linking to kdecore will give us a bit of help from libtool
if (! kde-config >& /dev/null); then
    have_qt=no
else
    kdelibs=`kde-config --install lib --expandvars 2>/dev/null`
    if test -z $kdelibs -a -f $kdelibs/libkdecore.la; then
        have_qt=no
    else
        DBUS_QT_LIBS=$kdelibs/libkdecore.la
    fi
fi

if test x$have_qt = xno ; then
    AC_MSG_WARN([Qt development libraries not found])
fi

if test x$enable_qt = xyes; then
    if test x$have_qt = xno; then
	AC_MSG_ERROR([Qt integration explicitly required, and Qt libraries not found])
    fi
fi

if test x$enable_qt = xno; then
   have_qt=no;
fi

AM_CONDITIONAL(HAVE_QT, test x$have_qt = xyes)

dnl Qt flags
AC_SUBST(DBUS_QT_CXXFLAGS)
AC_SUBST(DBUS_QT_LIBS)

##### Set up location for system bus socket
## name of socket relative to localstatedir
DBUS_SYSTEM_SOCKET=run/dbus/system_bus_socket
AC_SUBST(DBUS_SYSTEM_SOCKET)

#### find the actual value for $prefix that we'll end up with
REAL_PREFIX=
if test "x$prefix" = "xNONE"; then
  REAL_PREFIX=$ac_default_prefix
else
  REAL_PREFIX=$prefix
fi

#### Have to go $localstatedir->$prefix/var->/usr/local/var   
#### someone please fix this a better way...
LOCALSTATEDIR_TMP="$localstatedir"
old_prefix=$prefix
prefix=$REAL_PREFIX
EXPANDED_LOCALSTATEDIR=`eval echo $LOCALSTATEDIR_TMP`
prefix=$old_prefix
AC_SUBST(EXPANDED_LOCALSTATEDIR)

SYSCONFDIR_TMP="$sysconfdir"
old_prefix=$prefix
prefix=$REAL_PREFIX
EXPANDED_SYSCONFDIR=`eval echo $SYSCONFDIR_TMP`
prefix=$old_prefix
AC_SUBST(EXPANDED_SYSCONFDIR)

BINDIR_TMP="$bindir"
old_prefix=$prefix
prefix=$REAL_PREFIX
EXPANDED_BINDIR=`eval echo $BINDIR_TMP`
prefix=$old_prefix
AC_SUBST(EXPANDED_BINDIR)

#### Sort out init scripts

if test x$with_init_scripts = x; then
        if test -f /etc/redhat-release || test -f $EXPANDED_SYSCONFDIR/redhat-release ; then
                with_init_scripts=redhat
        else
                with_init_scripts=none
        fi
fi

AM_CONDITIONAL(DBUS_INIT_SCRIPTS_RED_HAT, test x$with_init_scripts = xredhat)

#### Tell tests where to find certain stuff in builddir
ABSOLUTE_TOP_BUILDDIR=`cd ${ac_top_builddir}. && pwd`

AC_DEFUN(TEST_PATH, [
TEST_$1=${ABSOLUTE_TOP_BUILDDIR}/test/$2
AC_DEFINE_UNQUOTED(TEST_$1, "$TEST_$1",
                   [Full path to test file test/$2 in builddir])
AC_SUBST(TEST_$1)
])

TEST_PATH(SERVICE_DIR, data/valid-service-files)
TEST_PATH(SERVICE_BINARY, test-service)
TEST_PATH(EXIT_BINARY, test-exit)
TEST_PATH(SEGFAULT_BINARY, test-segfault)
TEST_PATH(SLEEP_FOREVER_BINARY, test-sleep-forever)

AC_OUTPUT([
Doxyfile
bus/system.conf
bus/session.conf
bus/messagebus
Makefile
dbus/Makefile
glib/Makefile
qt/Makefile
bus/Makefile
test/Makefile
doc/Makefile
dbus-1.0.pc
dbus-glib-1.0.pc
test/data/valid-config-files/debug-allow-all.conf
test/data/valid-service-files/debug-echo.service
])

dnl ==========================================================================
echo "
                    D-BUS $VERSION
                  ==============

	prefix:                 ${prefix}
	source code location:	${srcdir}
	compiler:		${CC}
	cflags:		        ${CFLAGS}

        Maintainer mode:        ${USE_MAINTAINER_MODE}
        gcc coverage profiling: ${enable_gcov}
        Building unit tests:    ${enable_tests}
        Building verbose mode:  ${enable_verbose_mode}
        Building assertions:    ${enable_asserts}
        Building Qt bindings:   ${have_qt}
        Building GLib bindings: ${have_glib}
        Using XML parser:       ${with_xml}
        System bus socket:      ${EXPANDED_LOCALSTATEDIR}/${DBUS_SYSTEM_SOCKET}
        Init scripts style:     ${with_init_scripts}
"

if test x$enable_tests = xyes; then
        echo "NOTE: building with unit tests increases the size of the installed library and renders it insecure."
fi
if test x$enable_gcov = xyes; then
        echo "NOTE: building with coverage profiling is definitely for developers only."
fi
if test x$enable_verbose_mode = xyes; then
        echo "NOTE: building with verbose mode increases library size, may slightly increase security risk, and may cause a slight performance decrease, but aids debugging."
fi
if test x$enable_asserts = xyes; then
        echo "NOTE: building with assertions increases library size, but will help a lot when tracking down bugs in software using D-BUS."
fi
